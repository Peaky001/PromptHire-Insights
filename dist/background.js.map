{"version":3,"file":"background.js","mappings":";;;;AACA;AAAA;AAAA;AAAA;AADA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AA6BA;AAAA;AA7BA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AANA;AAQA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AA+BA;AAAA;AA/BA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAPA;AASA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AA8BA;AAAA;AA9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAVA;AAAA;AAYA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA","sources":["webpack://linkedin-detective/./src/background/background.js"],"sourcesContent":["// Background script for LinkedIn Profile Scraper extension\n\n// Extension installation/startup\nchrome.runtime.onInstalled.addListener(() => {\n  console.log('LinkedIn Profile Scraper extension installed');\n});\n\n// Clear job selection when extension is disabled/uninstalled\nchrome.runtime.onSuspend.addListener(() => {\n  console.log('Extension is being suspended, clearing job selection');\n  chrome.storage.sync.remove(['selectedJobOpening'], () => {\n    console.log('Job selection cleared on extension suspend');\n  });\n});\n\n// Clear job selection when extension is disabled\nchrome.management.onDisabled.addListener((extensionInfo) => {\n  if (extensionInfo.id === chrome.runtime.id) {\n    console.log('Extension is being disabled, clearing job selection');\n    chrome.storage.sync.remove(['selectedJobOpening'], () => {\n      console.log('Job selection cleared on extension disable');\n    });\n  }\n});\n\n// Handle messages between popup and content script\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.action === 'scrapeProfile') {\n    // Forward the message to the active tab's content script\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      if (tabs[0]) {\n        chrome.tabs.sendMessage(tabs[0].id, request, (response) => {\n          if (chrome.runtime.lastError) {\n            sendResponse({ \n              success: false, \n              error: 'Content script not available. Please refresh the LinkedIn page.' \n            });\n          } else {\n            sendResponse(response);\n          }\n        });\n      } else {\n        sendResponse({ \n          success: false, \n          error: 'No active tab found' \n        });\n      }\n    });\n    \n    return true; // Will respond asynchronously\n  }\n\n  if (request.action === 'sendToAPI') {\n    // Handle API call\n    handleAPICall(request.data, request.apiUrl)\n      .then(response => sendResponse({ success: true, response }))\n      .catch(error => sendResponse({ success: false, error: error.message }));\n    \n    return true; // Will respond asynchronously\n  }\n\n  if (request.action === 'fetchJobOpenings') {\n    // Fetch job openings from PromptHire API\n    fetchJobOpenings()\n      .then(data => sendResponse({ success: true, data }))\n      .catch(error => sendResponse({ success: false, error: error.message }));\n    \n    return true; // Will respond asynchronously\n  }\n\n  if (request.action === 'sendApplicant') {\n    // Send applicant data to PromptHire API\n    sendApplicant(request.data)\n      .then(response => sendResponse({ success: true, response }))\n      .catch(error => sendResponse({ success: false, error: error.message }));\n    \n    return true; // Will respond asynchronously\n  }\n});\n\n// PromptHire API configuration\nconst PROMPTHIRE_API_BASE = 'https://prompthire.org/api';\nconst PROMPTHIRE_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjhkZjdlYjNkNDQ1NWJlNTM5ZWVhMDdiIiwidXNlcl9uYW1lIjoicGhsaW5rZWRpbiIsInVzZXJfZW1haWwiOiJzaHJleWFzaEBwcm9tcHRoaXJlLmFpIiwib3JnX2lkcyI6WyI2NzNmNjU0NzExZmJlN2U1ZWQxZjM5MmUiXSwiZXhwIjoxNzYwNzczNDUyfQ.lCZEYRd0BNdLz8d96vwJHf7ZLEAUbAdSt6XOMgPGTnY';\n\n// Function to fetch job openings\nasync function fetchJobOpenings() {\n  try {\n    console.log('Fetching job openings from:', `${PROMPTHIRE_API_BASE}/jobopenings`);\n    \n    const response = await fetch(`${PROMPTHIRE_API_BASE}/jobopenings`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${PROMPTHIRE_TOKEN}`\n      }\n    });\n\n    console.log('Job openings response status:', response.status);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Job openings API error:', errorText);\n      throw new Error(`Failed to fetch job openings: ${response.status} ${response.statusText} - ${errorText}`);\n    }\n\n    const result = await response.json();\n    console.log('Job openings result:', result);\n    return result;\n  } catch (error) {\n    console.error('Fetch job openings error:', error);\n    throw error;\n  }\n}\n\n// Function to send applicant data\nasync function sendApplicant(applicantData) {\n  try {\n    console.log('Sending applicant to:', `${PROMPTHIRE_API_BASE}/applicants`);\n    console.log('Applicant data:', applicantData);\n    \n    const response = await fetch(`${PROMPTHIRE_API_BASE}/applicants`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${PROMPTHIRE_TOKEN}`\n      },\n      body: JSON.stringify(applicantData)\n    });\n\n    console.log('Send applicant response status:', response.status);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Send applicant API error:', errorText);\n      throw new Error(`Failed to send applicant: ${response.status} ${response.statusText} - ${errorText}`);\n    }\n\n    const result = await response.json();\n    console.log('Send applicant result:', result);\n    return result;\n  } catch (error) {\n    console.error('Send applicant error:', error);\n    throw error;\n  }\n}\n\n// Function to handle API calls\nasync function handleAPICall(profileData, apiUrl) {\n  try {\n    if (!apiUrl) {\n      throw new Error('API URL is required');\n    }\n\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        profileData,\n        timestamp: new Date().toISOString(),\n        source: 'linkedin-scraper-extension'\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`API call failed with status: ${response.status}`);\n    }\n\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error('API call error:', error);\n    throw error;\n  }\n}\n\n// Check if current tab is LinkedIn\nchrome.tabs.onActivated.addListener(async (activeInfo) => {\n  try {\n    const tab = await chrome.tabs.get(activeInfo.tabId);\n    if (tab.url && (tab.url.includes('linkedin.com/in/') || tab.url.includes('www.linkedin.com/in/'))) {\n      // Enable the extension icon when on LinkedIn profile page\n      chrome.action.enable(activeInfo.tabId);\n    } else {\n      // Optionally disable on non-LinkedIn pages\n      // chrome.action.disable(activeInfo.tabId);\n    }\n  } catch (error) {\n    console.error('Error checking tab:', error);\n  }\n});\n\nconsole.log('LinkedIn Profile Scraper background script loaded');\n"],"names":[],"sourceRoot":""}